#cloud-config

coreos:
  units:
    - name: etcd2.service
      command: stop
    - name: fleet.service
      command: stop
    - name: flanneld.service
      command: stop
    # iptables-restore.service loads /var/lib/iptables/rules-save (defined below)
    - name: iptables-restore.service
      enable: true
      command: start
      drop-ins:
        - name: 01-delay-rules.conf
          content: |
            [Unit]
            Wants=attach-nat-interface.service
            After=attach-nat-interface.service
    - name: aws-environment.install.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=AWS runtime environment installer
        After=network-online.target
         
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/usr/bin/bash -c '/opt/bin/echo_aws_environment > /etc/aws_environment'
    - name: attach-nat-interface.service 
      enable: true
      command: start
      content: |
        [Unit]
        Description=Attach subnet-specific NAT interface
        Requires=early-docker.service aws-environment.install.service
        After=early-docker.service aws-environment.install.service
        Before=early-docker.target
        
        [Service]
        Type=oneshot
        RemainAfterExit=true
        EnvironmentFile=/etc/aws_environment
        Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
        ExecStart=/usr/bin/docker run --rm --net=host \
          nordstrom/awscli:1.7.36 ec2 attach-network-interface \
            --region "$AWS_REGION" \
            --network-interface-id "${network_interface_id}" \
            --instance-id $EC2_INSTANCE_ID \
            --device-index 1
        # thanks! https://wiki.archlinux.org/index.php/Network_configuration#Enabling_and_disabling_network_interfaces
        ExecStartPost=/usr/bin/ip link set eth0 down
        ExecStartPost=/usr/bin/sleep 30
        ExecStartPost=/usr/bin/systemctl restart systemd-networkd
        WantedBy=early-docker.target
write_files:
  # /var/lib/iptables/rules-save from: http://www.jimmycuadra.com/posts/securing-coreos-with-iptables/
  # rules from: https://github.com/terraform-community-modules/tf_aws_nat/blob/e591cf826bc3fa096b7fffa835bd967bcea05b74/nat.conf
  - path: /var/lib/iptables/rules-save
    permissions: 0644
    owner: root:root
    content: |
      *filter
      :INPUT DROP [0:0]
      :FORWARD DROP [0:0]
      :OUTPUT ACCEPT [0:0]
      -N LOGGINGF
      -N LOGGINGI
      [0:0] -A INPUT -i lo -j ACCEPT
      [0:0] -A INPUT -s ${vpc_cidr_range} -i eth1 -j ACCEPT
      [0:0] -A INPUT -m state --state "ESTABLISHED,RELATED" -j ACCEPT
      [0:0] -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT
      [0:0] -A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
      [0:0] -A INPUT -p icmp -m icmp --icmp-type 3 -j ACCEPT
      [0:0] -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT
      [0:0] -A INPUT -j LOGGINGI
      [0:0] -A FORWARD -s ${vpc_cidr_range} -j ACCEPT
      [0:0] -A FORWARD -m state --state "ESTABLISHED,RELATED" -j ACCEPT
      [0:0] -A FORWARD -j LOGGINGF
      [0:0] -A LOGGINGI -m limit --limit 2/min -j LOG --log-prefix "IPTables-INPUT-Dropped: " --log-level 4
      [0:0] -A LOGGINGF -m limit --limit 2/min -j LOG --log-prefix "IPTables-FORWARD-Dropped: " --log-level 4
      [0:0] -A LOGGINGI -m limit --limit 2/min -j LOG --log-prefix "IPTables-INPUT-Dropped: " --log-level 4
      [0:0] -A LOGGINGF -m limit --limit 2/min -j LOG --log-prefix "IPTables-FORWARD-Dropped: " --log-level 4
      [0:0] -A LOGGINGF -j DROP
      [0:0] -A LOGGINGI -j DROP
      COMMIT
      *nat
      :PREROUTING ACCEPT [0:0]
      :OUTPUT ACCEPT [0:0]
      :POSTROUTING ACCEPT [0:0]
      [0:0] -A POSTROUTING -s ${vpc_cidr_range} -o eth1 -j MASQUERADE
      COMMIT
  - path: /opt/bin/echo_aws_environment
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash
      function main {
        echo "AWS_REGION=${aws_region}"
        echo "AWS_AVAILABILITY_ZONE=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)"
        echo "EC2_INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
      }
      main "$@"
